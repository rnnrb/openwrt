name: Build ApkWrt snapshot

on:
  push:
  workflow_dispatch:
    inputs:
      target:
        description: "Targets to build (x86/64 ath79/genric mediatek/mt7622)"
        required: false
        default: "x86/64 ath79/generic mediatek/mt7622"
      config:
        description: "Extra lines to append to the config"
        required: false
        default: ""

jobs:
  determine_targets:
    name: Set targets
    runs-on: ubuntu-latest
    outputs:
      target: ${{ steps.find_targets.outputs.target }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set targets
        id: find_targets
        run: |
          if [ "${{ github.event.inputs.target }}" = "all" ]; then
            export TARGETS="$(perl ./scripts/dump-target-info.pl targets 2>/dev/null | awk '{ print $1 }')"
          else
            if [ -n "${{ github.event.inputs.target }}" ]; then
              export TARGETS="${{ github.event.inputs.target }}"
            else
              export TARGETS="x86/64 ath79/generic mediatek/mt7622"
            fi
          fi
          JSON='['
          FIRST=1
          for TARGET in $TARGETS; do
            [[ $FIRST -ne 1 ]] && JSON="$JSON"','
            JSON="$JSON"'"'"${TARGET}"'"'
            FIRST=0
          done
          JSON="$JSON"']'
          echo -e "\n---- targets ----\n"
          echo "$JSON"
          echo -e "\n---- targets ----\n"
          echo "target=$JSON" >> $GITHUB_OUTPUT

  build:
    name: Build ${{ matrix.os }}/${{ matrix.target }}
    needs: determine_targets
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: False
      matrix:
        os: [ubuntu-latest]
        target: ${{fromJson(needs.determine_targets.outputs.target)}}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: openwrt

      - name: Setup Ubuntu
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get -y install libncurses-dev qemu-utils clang-12 \
            build-essential ccache ecj fastjar file g++ gawk \
            gettext git java-propose-classpath libelf-dev libncurses5-dev \
            libncursesw5-dev libssl-dev python3 unzip wget \
            python3-distutils python3-setuptools python3-dev rsync subversion \
            swig time xsltproc zlib1g-dev mkisofs
          echo "WORKPATH=$GITHUB_WORKSPACE/openwrt/" >> "$GITHUB_ENV"
          cd "$WORKPATH"
          pwd

      - name: Make prereq
        run: |
          cd "$WORKPATH"
          pwd
          make defconfig

      - name: Initialization environment
        run: |
          TARGET=$(echo ${{ matrix.target }} | cut -d "/" -f 1)
          SUBTARGET=$(echo ${{ matrix.target }} | cut -d "/" -f 2)
          echo "TARGET=$TARGET" >> "$GITHUB_ENV"
          echo "SUBTARGET=$SUBTARGET" >> "$GITHUB_ENV"

      - name: Update & Install feeds
        run: |
          cd "$WORKPATH"
          ./scripts/feeds update -a
          ./scripts/feeds install -a -p base -d m
          ./scripts/feeds install -a

      - name: Set configuration
        run: |
          cd "$WORKPATH"
          curl "https://downloads.openwrt.org/snapshots/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/config.buildinfo" > .config
          for CONFIG in ${{ github.event.inputs.config }}; do
            echo "CONFIG_$CONFIG" >> .config
          done
          echo "CONFIG_USE_APK=y" >> .config
          echo "CONFIG_BPF_TOOLCHAIN_HOST=y" >> .config
          echo "CONFIG_PACKAGE_uxc=m" >> .config
          echo "CONFIG_PACKAGE_uvol=m" >> .config
          echo "CONFIG_PACKAGE_strace=m" >> .config
          echo "CONFIG_PACKAGE_tmate=m" >> .config
          echo "CONFIG_PACKAGE_luci=m" >> .config
          echo "CONFIG_PACKAGE_freeswitch=m" >> .config
          echo -e "\n---- config input ----\n"
          cat .config
          echo -e "\n---- config input ----\n"
          make defconfig
          echo -e "\n---- config post-defconfig ----\n"
          cat .config
          echo -e "\n---- config post-defconfig ----\n"
          echo "${{ secrets.PUBLIC_KEY_PEM }}" > public-key.pem
          echo "${{ secrets.PRIVATE_KEY_PEM }}" > private-key.pem

      - name: Build tools
        run: |
          cd "$WORKPATH"
          make tools/install -j$(nproc) || \
            make tools/install V=s

      - name: Build toolchain
        run: |
          cd "$WORKPATH"
          make toolchain/install -j$(nproc) || \
            make toolchain/install V=s

      - name: Build target
        run: |
          cd "$WORKPATH"
          make target/compile -j$(nproc) IGNORE_ERRORS='n m' || \
            make target/compile IGNORE_ERRORS='n m' V=s

      - name: Build packages
        run: |
          cd "$WORKPATH"
          make package/apk/host/compile -j$(nproc) || \
            make package/apk/host/compile V=s
          make package/compile -j$(nproc) IGNORE_ERRORS='n m' || \
            make package/compile IGNORE_ERRORS='n m' V=s
          make package/index V=s

      - name: Determine Kernel version
        run: |
          cd "$WORKPATH"
          export TOPDIR=$(pwd)
          KERNEL_VERSION="$(make --no-print-directory -C target/linux \
            val.LINUX_VERSION val.LINUX_RELEASE val.LINUX_VERMAGIC | \
            tr '\n' '-' | head -c -1)"
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> "$GITHUB_ENV"

      - name: Determine architecutre
        run: |
          cd "$WORKPATH"
          echo "ARCH=$(make val.ARCH_PACKAGES)" >> "$GITHUB_ENV"

      - name: Upload packages
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: apk
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_S3_ENDPOINT: ${{ secrets.AWS_S3_ENDPOINT }}
          AWS_REGION: auto
          SOURCE_DIR: openwrt/bin/packages/${{ env.ARCH }}/
          DEST_DIR: packages/${{ env.ARCH }}/

      - name: Prepare upload of kmods
        continue-on-error: true
        run: |
          cd "$WORKPATH"
          KMOD_DIR="bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/kmods/${{ env.KERNEL_VERSION }}/"
          mkdir -p "$KMOD_DIR"
          cp bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}//packages/kmod-*.apk "$KMOD_DIR"
          make package/index V=s PACKAGE_SUBDIRS="$KMOD_DIR"

      - name: Upload kmods
        continue-on-error: true
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: apk
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_S3_ENDPOINT: ${{ secrets.AWS_S3_ENDPOINT }}
          AWS_REGION: auto
          SOURCE_DIR: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/kmods/${{ env.KERNEL_VERSION }}/
          DEST_DIR: targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/kmods/${{ env.KERNEL_VERSION }}/

      - name: Install packages
        run: |
          cd "$WORKPATH"
          make package/install -j$(nproc) || \
            make package/install V=s

      - name: Build firmware
        run: |
          cd "$WORKPATH"
          make target/install -j$(nproc) || \
            make target/install V=s

      - name: Buildinfo
        run: |
          cd "$WORKPATH"
          make buildinfo V=s

      - name: JSON overview
        run: |
          cd "$WORKPATH"
          make json_overview_image_info V=s

      - name: Checksum
        run: |
          cd "$WORKPATH"
          make checksum V=s

      - name: Clean build
        run: |
          cd "$WORKPATH"
          rm -rf staging_dir/ build_dir

      - name: Upload target
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: apk
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_S3_ENDPOINT: ${{ secrets.AWS_S3_ENDPOINT }}
          AWS_REGION: auto
          SOURCE_DIR: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/
          DEST_DIR: targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/
